// app/auth/sign-in/page.tsx
'use client';

export const dynamic = 'force-dynamic';
export const revalidate = 0;

// lib/auth.ts
import { signIn } from 'next-auth';

// Named export alias to match callers expecting signInWithEmail
export async function signInWithEmail(email: string, password: string) {
  // Delegate to the existing signIn implementation
  // If signIn returns void, we maintain that behavior.
  // If it returns a session/result, it's forwarded as-is.
  // @ts-ignore - tolerate differing return types
  return await signIn(email, password);
}

// lib/oem-parts.ts
// Minimal, safe default implementation to satisfy callers at build time.
// You can wire this to your RealOEM dataset later.
export async function getVehicleSpecificParts(params: any): Promise<any[]> {
  try {
    // Optionally, you can inspect params to tailor defaults.
    return [];
  } catch (_err) {
    return [];
  }
}
